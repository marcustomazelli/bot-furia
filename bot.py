import os
from pickle import GET
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import requests
import asyncio 

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

#script para o bot do telegram
async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f'Hello {update.effective_user.first_name}')


app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

app.add_handler(CommandHandler("hello", hello))

client = OpenAI(api_key=OPENAI_API_KEY)

conversa = [
    {
        "role": "system",
        "content": """
Voc√™ √© o Furico, o mascote oficial da FURIA Esports no Telegram, alimentado pela OpenAI. Voc√™ conversa com os f√£s da FURIA e responde perguntas sobre a FURIA, esports em geral, e esportes tradicionais quando perguntarem. Voc√™ tamb√©m explica termos, g√≠rias, siglas e express√µes da cultura esportiva. Voc√™ √© ousado, marrento, direto. √Äs vezes responde seco, sem floreios. Nunca usa emojis. N√£o tenta ser fofo nem exageradamente educado: voc√™ √© um torcedor apaixonado, provocador, mas carism√°tico. Nunca rude ou ofensivo.

<user_information>
O usu√°rio est√° interagindo via Telegram.
O usu√°rio provavelmente √© torcedor da FURIA, mas pode perguntar sobre qualquer esporte ou evento esportivo.
O usu√°rio espera respostas r√°pidas, atualizadas, confi√°veis e completas.
O usu√°rio pode perguntar tamb√©m sobre cultura esportiva, termos t√©cnicos ou express√µes de torcida.
</user_information>

<communication_style>
Fale sempre direto ao ponto.
N√£o use emojis.
N√£o fa√ßa rodeios ou frases muito longas sem necessidade.
Pode ser seco ou curto quando fizer sentido.
Pode ‚Äúse gabar‚Äù da FURIA ou provocar advers√°rios de leve.
Quando n√£o souber, admita com naturalidade: "N√£o achei essa agora. Vai ter que esperar, parceiro."
Use um tom confiante e ousado, mas sem ser agressivo.
</communication_style>

Quando perguntarem o significado de termos como ‚Äúeco round‚Äù, ‚Äúclutch‚Äù, ‚Äúace‚Äù, ‚Äúeco‚Äù, ‚Äúquadra kill‚Äù, ‚Äúheadshot‚Äù, ‚Äúeco pistol‚Äù, ‚Äúchoke‚Äù, ‚Äútilt‚Äù, voc√™ explica de forma direta, clara, sem enrola√ß√£o.

Quando perguntarem algo fora do mundo esportivo, responda: "N√£o falo sobre isso. Aqui √© esporte e nada mais."

<conversation_behavior>
Al√©m de responder perguntas, voc√™ conversa como um torcedor da FURIA: provoca, brinca, comenta os jogos, d√° opini√£o marota. Nunca fala de pol√≠tica, religi√£o ou temas sens√≠veis.
N√£o entra em discuss√µes fora do mundo dos esportes.
Quando o usu√°rio s√≥ conversar, voc√™ apenas responde na brincadeira. S√≥ traga informa√ß√µes detalhadas se for perguntado explicitamente.
</conversation_behavior>

<data_behavior>
Voc√™ receber√° dados atualizados sobre a FURIA (ex: pr√≥ximas partidas, estat√≠sticas das partidas) embutidos no contexto da conversa, vindos de uma API da HLTV via HTTP.
Sempre use os dados mais recentes imbutidos no contexto da conversa. 
Sempre use esses dados como sua fonte principal de informa√ß√£o factual.
N√£o tente buscar outras fontes ou inventar dados diferentes.
Se o dado estiver presente no contexto, confie nele e responda com base nele.
Se o dado n√£o existir ou n√£o estiver presente, admita naturalmente que a informa√ß√£o n√£o est√° dispon√≠vel agora.
Nunca adivinhe ou crie estat√≠sticas ou partidas fict√≠cias.
</data_behavior>
        """
    }
]

#crio uma fun√ß√£o para responder as mensagens com gpt
async def responder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    texto_usuario = update.message.text #pego o que o usu√°rio mandou e boto na vari√°vel texto_usuario

    prox_partida = await proxima_partida()

    partida_monitorada = await monitorar_partida()

    # Adiciona o contexto
    conversa.append({"role": "system", "content": f"Pr√≥xima partida da FURIA no CS:GO:\n{prox_partida}"})

    conversa.append({"role": "system", "content": f"Estat√≠sticas ao vivo da partida da FURIA:\n{partida_monitorada}"})

    conversa.append({"role": "user", "content": texto_usuario}) #adiciono na vari√°vel conversa que eu criei

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=conversa #passo todo contexto/mensagem pro modelo
    )

    resposta_bot = response.choices[0].message.content  # choice √© um array dentro do obj response. cada item de choices representa uma poss√≠vel resposta que o modelo gerou. choices[0] pega a primeira (e √∫nica) resposta gerada. depois pega o conteudo da mensagem e empacota na vari√°vel resposta_bot

    conversa.append({"role": "assistant", "content": resposta_bot}) #aqui eu add a resposta do bot no contexto da conversa

    # Responder o usu√°rio
    await update.message.reply_text(resposta_bot)

# Registrar o handler para mensagens de texto comuns
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, responder))


#funcao que pega a proxima partida da FURIA via http da api da hltv 
async def proxima_partida(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://hltv-api.vercel.app/api/matches.json"
    response = requests.get(url) 

    if response.status_code != 200: #se a requisi√ß√£o n√£o retornar 200, ou seja, se der erro eu exibo uma mensagem de erro
        await update.message.reply_text("Erro ao acessar a API da HLTV. Tente novamente mais tarde.")
        return
    
    partidas = response.json() #se der certo, eu pego o json da resposta e coloco na vari√°vel partidas

    # Filtrar partidas da FURIA
    for partida in partidas:
        times = partida.get('teams', []) #pego dentro do json a lista de jogos e puxo os times
        if not times or len(times) < 2: #verifico se se tem mais de 2 times
            continue

        time1 = times[0] #atribuo o primeiro time a vari√°vel time1
        time2 = times[1] #atribuo o segundo time a vari√°vel time2

        if time1.get('id') == 8297 or time2.get('id') == 8297: # #verifico se o id do time1 ou do time2 √© igual ao id da FURIA 
            nome_time1 = time1['name'] #atribuo cada conteudo respectivo do time e do hor√°rio do jogo as suas vari√°veis
            nome_time2 = time2['name']
            horario = partida['time']  

            #aqui tive que formatar a data e hora do jogo 
            from datetime import datetime
            horario_br = datetime.strptime(horario, "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d/%m/%Y %H:%M")

            pr√≥xima_partida = f"üî• Pr√≥xima partida: {nome_time1} vs {nome_time2}\nüóìÔ∏è Data e Hora: {horario_br} (UTC)" #atribui na variavel mensagem o texto que o bot vai retornar com as instru√ß√µes da prox partida
            await update.message.reply_text(pr√≥xima_partida) 
            return

    await update.message.reply_text("N√£o encontrei pr√≥ximas partidas da FURIA no momento.")

app.add_handler(CommandHandler("proxima_partida", proxima_partida))



# monitorar partida 
async def monitorar_partida(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1. Buscar partidas
    url = "https://hltv-api.vercel.app/api/matches.json"
    response = requests.get(url)

    if response.status_code != 200:
        await update.message.reply_text("Erro ao acessar a API da HLTV. Tente novamente mais tarde.")
        return

    partidas = response.json()

    partida_furia = None
    for partida in partidas:
        times = partida.get('teams', [])
        if not times or len(times) < 2:
            continue

        time1 = times[0]
        time2 = times[1]

        if time1.get('id') == 8297 or time2.get('id') == 8297:
            partida_furia = partida
            break

    if not partida_furia:
        await update.message.reply_text("Nenhuma partida da FURIA encontrada no momento.")
        return

    # 2. Buscar estat√≠sticas dos jogadores
    stats_url = "https://hltv-api.vercel.app/api/match.json"
    stats_response = requests.get(stats_url)

    if stats_response.status_code != 200:
        await update.message.reply_text("Erro ao acessar estat√≠sticas da partida.")
        return

    stats = stats_response.json()

    # 3. Filtrar jogadores da FURIA
    jogadores_furia = [player for player in stats if player.get('team', '').lower() == 'furia']

    if not jogadores_furia:
        await update.message.reply_text("Nenhuma estat√≠stica dos jogadores da FURIA dispon√≠vel no momento.")
        return

    # 4. Montar mensagem
    monitorar_partida = "üî• Estat√≠sticas dos jogadores da FURIA:\n\n"
    for jogador in jogadores_furia:
        monitorar_partida += (
            f"üë§ {jogador.get('nickname')}\n"
            f"‚Ä¢ Rating: {jogador.get('rating')}\n"
            f"‚Ä¢ KD: {jogador.get('kd')}\n"
            f"‚Ä¢ Maps Jogados: {jogador.get('mapsPlayed')}\n\n"
        )

    await update.message.reply_text(monitorar_partida)

app.add_handler(CommandHandler("monitorar_partida", monitorar_partida))


# Start the bot 
app.run_polling()